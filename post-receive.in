#!/bin/bash
#
# This script is run by git after a push has been made to the repository

set -e
unset GIT_DIR # whithout this we get git errors "remote: fatal: Not a git repository: '.'" when the script is started by a push (not when executed locally)

echo ----- Run CppCodeBaseJenkinsjob post-receive hook -----

# The base url of the jenkins server on which a job is triggered e.g. http://localhost:8080
jenkinsUrl=@JENKINS_URL@
# The user that triggers the job
jenkinsUser=@JENKINS_USER@
# The password of that user
jenkinsPassword=@JENKINS_PASSWORD@
# The name of the job that is triggered.
jenkinsJobName=@JENKINS_JOB_NAME@
# The name of the package in the build repository to which this hook belongs
ccbPackage=@CCB_PACKAGE@

jenkinsCrumb=$(curl --user $jenkinsUser:$jenkinsPassword "$jenkinsUrl/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,\":\",//crumb)" )
echo $jenkinsCrumb

function triggerJenkinsJob()
{
    branch=$1

    # filter out pushes that do noot seem to belong to an integration branch
    filterPattern="^.*-int-.*$"

    if [[ "$branch" =~ $filterPattern ]]; then 
        echo "Trigger integration jenkins job" $jenkinsJobName "for branch" $branch

        # Trigger the parameterized build-job and pass it the branch name as argument.
        set -x
        curl $jenkinsUrl/job/$jenkinsJobName/build \
        --user $jenkinsUser:$jenkinsPassword \
        --header $jenkinsCrumb \
        --data-urlencode json='{"parameter": [{"name":"branchOrTag", "value":"'$branch'"},{"name":"package", "value":"'$ccbPackage'"}]}'
        set +x
    
    else
        echo "Trigger jenkins job" $jenkinsJobName "for branch" $branch

        # Trigger the parameterized build-job and pass it the branch name as argument.
        set -x
        curl $jenkinsUrl/job/$jenkinsJobName/build \
        --user $jenkinsUser:$jenkinsPassword \
        --header $jenkinsCrumb \
        --data-urlencode json='{"parameter": [{"name":"branchOrTag", "value":"'$branch'"},{"name":"package", "value":"'$ccbPackage'"},{"name":"task", "value":"rebuild"}]}'
        set +x
    fi
}

# The information about pushed branches is given to script over the input stream
# This stream contains a line for each branch that was pushed.
# Each line looks something like 2b3a00c587a4df993d608b82ab31321b88037dc9 18f998b61f0fe5069e5666a33863b70bf44a12f8 refs/heads/Knitschi-master
# Where the first hash probably marks the first pushed commit and the second the last pushed commit.
# The last element contains the name of the branch.
while read oldrev newrev refname
do
    # get the latest version of trigger script
    # get the pure branch name
    pushedBranch=$(basename $refname)
    triggerJenkinsJob $pushedBranch
done

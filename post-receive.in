#!/bin/bash
#
# This script is run by git after a push has been made to the repository

set -e
unset GIT_DIR # whithout this we get git errors "remote: fatal: Not a git repository: '.'" when the script is started by a push (not when executed locally)

echo ----- Run CPFJenkinsjob post-receive hook -----

# The base url of the jenkins server on which a job is triggered e.g. http://localhost:8080
jenkinsUrl=@JENKINS_URL@
# The user that triggers the job
jenkinsUser=@JENKINS_USER@
# The password of that user
jenkinsPassword=@JENKINS_PASSWORD@
# The name of the job that is triggered.
jenkinsJobName=@JENKINS_JOB_NAME@


jenkinsCrumb=$(curl --user $jenkinsUser:$jenkinsPassword "$jenkinsUrl/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,\":\",//crumb)" )
echo $jenkinsCrumb

function triggerJenkinsJob()
{
    refPath=$1

    # Only trigger the job after pushes to branches.
    # This allows us to ignore pushes to the notes which is necessary as we need the
    # notes to suppress triggering builds for pushes from within the pipeline script.
    refsName=$(basename $(dirname $refpath))
    if [ "$refsName" != "heads" ]; then
        echo ----- The build was not triggered because no commits where pushed -----
        return
    fi

    branch=$(basename $refpath)

    set -x
    git show -s HEAD
    set +x

    # Do not trigger the job if the dontTr1gger not is set.
    # The note is set before internal pushes in the buildjob.
    if git show -s HEAD | grep -q "dontTr1gger"; then
        echo ----- The build was not triggered because of a dontTr1gger note -----
    else
        echo "----- Trigger jenkins job "$jenkinsJobName" for branch "$branch" -----" 

        # Trigger the parameterized build-job and pass it the branch name as argument.
        set -x
        curl $jenkinsUrl/job/$jenkinsJobName/build \
        --user $jenkinsUser:$jenkinsPassword \
        --header $jenkinsCrumb \
        --data-urlencode json='{"parameter": [{"name":"branchOrTag", "value":"'$branch'"}]}'
        set +x
    fi
}

# The information about pushed branches is given to script over the input stream
# This stream contains a line for each reference that was pushed. This can not only be branches but also tags or notes.
# Each line looks something like 2b3a00c587a4df993d608b82ab31321b88037dc9 18f998b61f0fe5069e5666a33863b70bf44a12f8 refs/heads/master
# Where the first hash probably marks the first pushed commit and the second the last pushed commit.
# The last element contains the name of the branch. This can also be something like refs/notes/commits
while read oldrev newrev refpath
do
    triggerJenkinsJob $refpath
done

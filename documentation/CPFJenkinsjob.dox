/**
\defgroup CPFJenkinsjobGroup CPFJenkinsjob

\brief A package that provides a Jenkins job configuration for a CPF project.

The package contains the following functionality:

- A generic jenkins pipeline groovy script, that can be used to implement a build-job for a CPF project.
- The `setup.py` script that builds on the CPFMachines setup script. It adds job config .xml files to 
the jenkins server that will run the CPF pipeline script.
- The `deploy_githooks.py` script that installs hook scripts on all involved repositories that make sure
the build-job is started when commits are pushed.

<HR>

\section CPFJenkinsjobSetupSection Setting up a CPF build-job

This package builds upon the jenkins server that is setup with the CPFMachines package.
It can be used to add jenkins build-jobs to your jenkins server that operate on CPF based
repositories. In order to add a job for a CPF project you have to make sure that the <code>config.json</code>
\ref CPFMachinesConfigurationsSubsubsection "config file" that is used with the <code>CPFMachines.setup</code> module 
contains some data in its <code>JenkinsConfig -> CPFJobs</code> section. In order to setup a jenkins-server
with CPF-build-jobs, you will have to run the setup module from CPFJenkinsjob with the following command.

\code{.sh}
python -m Sources.CPFJenkinsjob.setup Sources/MyCPFMachinesConfig.json
\endcode

This call replaces the call to the setup module from the CPFMachines package which is used when the Jenkins
server is configured without any CPF-build-jobs.


\section CPFJenkinsjobHookSetupSection Automatic build-Job execution

In day to day development it is practical when the build-job is run automatically whenever a developer
pushes commits that should be integrated into a main branch of the project. To enable that CPFJenkinsjob
provides a python module that adds hook scripts to the repositories of your CPF-projects.

\todo Add documentation for hook config and how to run it.

\section JobParameterSection Running the CPF Jenkins job

The jenkins job that is created by this package is a parameterized job. The parameters can be used to
execute multiple tasks on a CPF CI-project when the job is started via the Jenkins web-interface.


\subsection JobSubsection1 1. Integrating new commits

In this mode, the job verifies the commits made to an integration branch by building the pipeline in all
configurations, merge the commits to a main branch and add a new internal-version tag to mark
the commit as a successful build. The project web-page will be updated with the latest version of the 
generated documentation. This mode is the most common use case, which should be triggered automatically 
when pushing commits to an integration branch of the build repository or one of the package repositories.

To do an integration job following parameters must be set:

- <b>branchOrTag:</b> origin/\<name\>-int-\<MainBranch\>
- <b>package:</b>     If a package was changed, this must be set to the package name.
                    Note that this must be a package that has its versioning handled by
                    this build project.

all other can be left at their defaults.


\subsection JobSubsection2 2. Tagging a commit with a release version

In this mode the job will overwrite an existing internal version tag with a release version and rebuild
the tagged commit to create build artifacts with the new version. In this case you need to specify which 
part/digit of the version number should be incremented. The less significant digits are reset to zero. 
This will also update the projects web-page.

To create a release tag, the following parameters must be set:

- <b>branchOrTag:</b>  existing internal version-tag
- <b>task:</b>         one of incrementMajor, incrementMinor, incrementPatch

all other can be left at their defaults.


\subsection JobSubsection3 3. Rebuild an existing commit

Sometimes it is necessary to rebuild an already integrated commit in order to recreate build artifacts.
In this mode, the job will not touch the version tags are changed. This will also update the projects web-page.

To rebuild an existing commit the following parameters must be set:

- <b>branchOrTag:</b>  \<version-tag\>
- <b>task:</b>         rebuild

all other can be left at their defaults.


\subsection JobSubsection4 4. Testing or debugging the job itself

When working on the CMakeProjectFramework itself, it is sometimes useful to speed up the build-job by running it
with a reduced workload and without modifying the repository. Reducing the workload can be achieved by limiting
the build to a special configuration and/or a special target.

In this case the following parameters must be set:

- <b>branchOrTag:</b>       origin/\<someBranch\>  (this should be the branch you work on)
- <b>task:</b>              rebuild
- <b>package:</b>           The package you work on.
- <b>cpfConfiguration:</b>  The configuration you are interested in.
- <b>target:</b>            The target that is build.
  
*/
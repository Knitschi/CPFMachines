#!/bin/bash
#
# This script is run by git after a push has been made to the repository

set -e
unset GIT_DIR # whithout this we get git errors "remote: fatal: Not a git repository: '.'" when the script is started by a push (not when executed locally)

echo ----- Run CppCodeBaseJenkinsjob post-receive hook -----

set jenkinsUser=CaptainGitHook
set jenkinsPassword=1234temp

function normalizeDir()
{
        normalDir="`cd "$1";pwd`"
        echo "$normalDir"
}


scriptDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# get the directory of the parallel non bare repository that provides the trigger script.
thisRepositoryDir=$(basename $(normalizeDir $scriptDir/..))

# assume the convention that the real repo is ended with .git and the sibling repo has the same name without .git
nonBareSisterRepoDir=${thisRepositoryDir::${#thisRepositoryDir}-4}
fullNonBareSisterRepoDir=$(normalizeDir $scriptDir/../../$nonBareSisterRepoDir)

# update the sibling repo
(cd $fullNonBareSisterRepoDir && git pull --all)

echo git pull worked

# The information about pushed branches is given to script over the input stream
# This stream contains a line for each branch that was pushed.
# Each line looks something like 2b3a00c587a4df993d608b82ab31321b88037dc9 18f998b61f0fe5069e5666a33863b70bf44a12f8 refs/heads/Knitschi-master
# Where the first hash probably marks the first pushed commit and the second the last pushed commit.
# The last element contains the name of the branch.
while read oldrev newrev refname
do
    # get the latest version of trigger script
    # get the pure branch name
    pushedBranch=$(basename $refname)

    # get the latest trigger script from the branch to which pushes were made.
    ( cd $fullNonBareSisterRepoDir && git checkout $pushedBranch)
    ( cd $fullNonBareSisterRepoDir && git submodule update --remote --recursive)

    bash $fullNonBareSisterRepoDir/Sources/CppCodeBaseJenkinsjob/triggerJenkinsJob.sh $refname "$jenkinsUser" "$jenkinsPassword" # pass all arguments except the first on to the triggerJenkinsJob.sh script
done



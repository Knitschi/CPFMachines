<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.12.1">
  <actions>
    <io.jenkins.blueocean.service.embedded.BlueOceanUrlAction plugin="blueocean-rest-impl@1.1.5">
      <blueOceanUrlObject class="io.jenkins.blueocean.service.embedded.BlueOceanUrlObjectImpl">
        <mappedUrl>blue/organizations/jenkins/$JOB_NAME</mappedUrl>
      </blueOceanUrlObject>
    </io.jenkins.blueocean.service.embedded.BlueOceanUrlAction>
  </actions>
  <description>A CppCodeBase build-job for the $JOB_NAME project.

Note! 
This job is generated by the CppCodeBaseJenkinsjob project.
Changes made via the Jenkins web interface are not permanent. 

The job can execute multiple tasks on a CppCodeBase project.

1. Verify the commits made to an integration branch by building the pipeline in all
configurations, merge the commits to a main branch and add a new internal-version tag to mark
the commit with the succesfull build. In this case the ccb-web-server will be updated
with the latest version of the generated documentation.
This is the most common use case, which should be triggered automatically when pushing commits
to an "integration" branch of the build repository or one of the package repositories.

In this case the following parameters must be set:

branchOrTag: origin/&lt;name&gt;-int-&lt;MainBranch&gt;
package:     If a package was changed, this must be set to the package name.
             Note that this must be a package that has its versioning handled by
             this build project.

all other can be left at their defaults.


2. Overwrite an existing  internal version tag with a release version and rebuild
the tagged commit to create build artefacts with the new version. In this case
you need to specify which part of the version number should be incremented.
The lower parts are reset to zero. This will also update the project web page.

In this case the following parameters must be set:

branchOrTag: &lt;version-tag&gt;
task:        one of incrementMajor,incrementMinor,incrementPatch

all other can be left at their defaults.


3. Rebuild an already integrated version-tag in order to recreate build artefacts.
No version tags are changed. This will also update the project web page.

In this case the following parameters must be set:

branchOrTag: &lt;version-tag&gt;
task:        rebuild

all other can be left at their defaults.


4. Run the job for debugging purposes in reduced form.
This can be usefull while working on one of the CppCodeBase projects itself. In this
case the job can often reduced one configuration or target of interest in order to 
get a much quicker job execution. 

In this case the following parameters must be set:

branchOrTag:      origin/&lt;someBranch&gt;  (this should be the branch you work on)
task:             rebuild                    (we dont want to get any tagging for experimental executions)
package:          The package you work on.
ccbConfiguration: The configuration you are interested in.
target:           The target you are interested in or a fast to build target if you do not care about the pipeline.
  
</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>5</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>branchOrTag</name>
          <description>Determines the git reference that will be build. This can be a branch or a tag.
Examples:
Branch: origin/Knitschi-int-master
Tag: 0.1.3
</description>
          <defaultValue>origin/Knitschi-int-master</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>task</name>
          <description>Determines the operation that the job will do (see job description). 
Possible values are: integration, rebuild, incrementMajor, incrementMinor, incrementPatch
</description>
          <defaultValue>integration</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>package</name>
          <description>Determines the integration target.
This parameter can be left empty or set to the name of a package subdirectory.
</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ccbConfiguration</name>
          <description>This parameter can be used to only build one configuration.
If no value is set, the job will build all configurations that are listed in the
Sources/BuildConfigurations/TestedConfigurations.txt
file.
</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>target</name>
          <description>The CppCodeBase target that is build.
This parameter is intended for reducing build times during debugging.
</description>
          <defaultValue>pipeline</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>buildRepository</name>
          <description>The address that is used to checkout the build-repostiory.
This parameter is only needed to allow using the same jenkinsfile for multiple CppCodeBase
build projects. The default value may need to be changed if the repository is relocated.
Note that there should only be one buildjob for a build-repository, because the buildjob
serializes the integration of new commits and the versioning mechanics rely on it.
</description>
          <defaultValue>$BUILD_REPOSITORY</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition" plugin="workflow-cps@2.37">
    <scm class="hudson.plugins.git.GitSCM" plugin="git@3.5.0">
      <configVersion>2</configVersion>
      <userRemoteConfigs>
        <hudson.plugins.git.UserRemoteConfig>
          <url>ssh://admin@datenbunker/share/GitRepositories/CppCodeBaseJenkinsfile.git</url>
        </hudson.plugins.git.UserRemoteConfig>
      </userRemoteConfigs>
      <branches>
        <hudson.plugins.git.BranchSpec>
          <name>$JENKINSFILE_VERSION</name>
        </hudson.plugins.git.BranchSpec>
      </branches>
      <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
      <submoduleCfg class="list"/>
      <extensions/>
    </scm>
    <scriptPath>JenkinsPipelineScript.groovy</scriptPath>
    <lightweight>false</lightweight>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
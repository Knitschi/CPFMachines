
# The docker image file for the jenkins slave nodes.
# 
# This is a debian based container that includes the tools that are required to execute a CPF build-pipeline.

FROM ubuntu:20.04

# Prevents the need of user interaction with "Configuring tzdata"
ENV DEBIAN_FRONTEND=noninteractive 


# ----------------------- ADD USER JENKINS -------------------------------
# Set user jenkins to the image 
RUN useradd -m -d /home/jenkins -s /bin/sh jenkins &&\
    echo "jenkins:jenkins" | chpasswd

    
# ----------------------- INSTALL BASIC TOOLS -------------------------------
# install basic tools
# - wget to download packages
# - openssh-server needed to allow the build master to access the slave
# - vim for manual editing files
# - netcat can be used to manuall examine the network when debugging the container
# - tree is used when running the pipeline for debug purposes
# - git for downloading the code-base
# - python is used to implement the build-pipeline.
# - sudo is required by some conan packages.
# - libgl1-mesa-dev is a dependency of the conan qt package. If this is not installed, conan will try to apt-get install it itself
#   which blocks the conan execution due to the sudo password request.
# - pkg-config If this is missing we get errors in the conan qt clang build.
# - inetutils-ping enthält ping und wird für CPFTests benötigt.
# - xorg-dev wird für qt benötigt.
#
RUN apt-get -q update && apt-get -q -y install \
inetutils-ping \
build-essential \
llvm-10 \
clang \
clang-10 \
clang-format-10 \
clang-tidy-10 \
ninja-build \
cmake \
wget \
openssh-server \
vim \
netcat \
tree \
unzip \
git \
xvfb \
graphviz \
valgrind \
abi-compliance-checker \
universal-ctags \
abi-dumper \
openjdk-8-jdk \
libgl1-mesa-dev \
pkg-config \
doxygen \
libx11-xcb-dev \
xorg-dev \
libxcb-render0-dev \
libxcb-render-util0-dev \
libxcb-xkb-dev \
libxcb-icccm4-dev \
libxcb-image0-dev \
libxcb-keysyms1-dev \
libxcb-randr0-dev \
libxcb-shape0-dev \
libxcb-sync-dev \
libxcb-xfixes0-dev \
libxcb-xinerama0-dev

# These are the same tools that are installed on the ubuntu 2004 github runner.
# One of these tools fixes the qt package build.
RUN apt-get -q update && apt-get -q -y install \
bison \
brotli \
bzip2 \
curl \
dbus \
dnsutils \
dpkg \
fakeroot \
file \
flex \
ftp \
gnupg2 \
iproute2 \
iputils-ping \
jq \
lib32z1 \
libc++-dev \
libc++abi-dev \
libcurl4 \
libgbm-dev \
libgconf-2-4 \
libgtk-3-0 \
libsecret-1-dev \
libsqlite3-dev \
libunwind8 \
libxkbfile-dev \
libxss1 \
locales \
m4 \
netcat \
openssh-client \
parallel \
patchelf \
pkg-config \
python-is-python3 \
rpm \
rsync \
shellcheck \
sqlite3 \
ssh \
sudo \
telnet \
texinfo \
time \
tk \
tzdata \
unzip \
upx \
wget \
xorriso \
xvfb \
xz-utils \
zip \
zstd \
zsync


# ----------------- CMAKE ---------------
# cmake needs to be build and installed by hand because the os version often is too old.
COPY buildCMake.sh buildCMake.sh
RUN /bin/bash buildCMake.sh


# ----------------- Install python and python packages 
RUN apt-get -q -y install python3.9 python3-pip

RUN pip3 install \
paramiko \
requests \
sphinx \
conan


# ----------------- Start operations for the jenkins user.
USER jenkins

# ----------------- Configure Conan --------------
# Add my standard profiles.
RUN conan config install https://github.com/Knitschi/ConanConfig.git

# Add additional package repsitories. 
RUN conan remote add bincrafters https://api.bintray.com/conan/bincrafters/public-conan
RUN conan remote add knitschi-conan https://knitschi.jfrog.io/artifactory/api/conan/knitschi-conan

# Add authentication token to prevent later authentication requests.
RUN conan user Jenkins -r knitschi-conan -p "01OtE|J@TdFqHlxV"

# ----------------- Configure Git --------------
RUN git config --global user.email "not@valid.com" &&\
    git config --global user.name "jenkins" &&\
    git config --global credential.helper 'store --file ~/.jenkins-git-credentials'


USER root
    
# --------------- PREPARE SSH DEAMON ---------------     
# prepare running sshd
RUN sed -i 's|session required pam_loginuid.so|session optional pam_loginuid.so|g' /etc/pam.d/sshd &&\
    mkdir -p /var/run/sshd
    
COPY ssh_config /etc/ssh/sshd_config

# -------------- Create some directories and copy some files -----------
RUN mkdir /home/jenkins/.ssh &&\
mkdir /home/jenkins/bin &&\
mkdir -p /home/jenkins/.ssh &&\
chown -R jenkins:jenkins /home/jenkins/.ssh

 # This file is run by the jenkins-master to start the slave
COPY agent.jar /home/jenkins/bin/agent.jar         
RUN chown -R jenkins:jenkins /home/jenkins/bin
 
  
# ----------------- JAVA ----------------------
# Install JDK 8 (latest edition) 
#RUN echo "deb http://debian.netcologne.de/debian jessie-backports main" | tee --append /etc/apt/sources.list &&\
#      apt-get update &&\
#      apt-get install -y -t jessie-backports openjdk-8-jdk

#RUN apt-get update &&\
#    apt-get install -y openjdk-8-jdk



# Run the sshd server as command to keep the container alive.
CMD ["/usr/sbin/sshd", "-D"]

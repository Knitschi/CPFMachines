#!groovy

/**
The jenkins pipeline script for a CPF project.

The script expects the job parameters:

params.cpfCIRepository
params.branchOrTag
params.taggingOption
params.packages
params.cpfConfiguration
params.target
params.packageManager
params.buildResultRepositoryMaster
params.buildResultRepositoryWebServer
params.buildResultRepositorySubdirectory
params.CPFCMake_DIR
params.CPFBuildscripts_DIR
params.CIBuilsConfigurations_DIR

*/

import static Constants.*
import groovy.json.JsonSlurperClassic


//############################### FUNCTION SECTION ################################
class Constants {
    static final CPF_JENKINSJOB_VERSION = '0.0.0' // how can we get this from a generated file?
    
    // locations
    static final CHECKOUT_FOLDER = 'C O'    // We checkout to a subdirectory so the folders for the test files that lie parallel to the projectRepository are still within the workspace.
                                            // This needs a space to test if spaced directories work. It also must be short because of path limits on windows
    // stash names
    static final INSTALL_STASH = "install"

    static final RELEASE_TAGGING_OPTIONS = ['incrementMajor', 'incrementMinor', 'incrementPatch']
    static final TAGGING_OPTIONS = ['internal'] + RELEASE_TAGGING_OPTIONS
}


//############################### SCRIPT SECTION ################################
println( """
####################################################
------------------ Build Parameter -----------------
taggingOption: ${params.taggingOption}
branchOrTag: ${params.branchOrTag}
cpfConfiguration: ${params.cpfConfiguration}
target: ${params.target}
packageManager: ${params.packageManager}
cpfCIRepository: ${params.cpfCIRepository}
buildResultRepositoryMaster: ${params.buildResultRepositoryMaster}
buildResultRepositoryWebServer: ${params.buildResultRepositoryWebServer}
buildResultRepositorySubdirectory: ${params.buildResultRepositorySubdirectory}
CPFCMake_DIR: ${params.CPFCMake_DIR}
CPFBuildscripts_DIR: ${params.CPFBuildscripts_DIR}
CIBuilsConfigurations_DIR: ${params.CIBuilsConfigurations_DIR}
----------------------------------------------------
####################################################
""")

if( params.target == '')
{
    params.target = 'pipeline'
}

def taggingOptionList = params.taggingOption.split(' ')
def taggingOption = ""
def taggedPackage = ""
if( taggingOptionList.size() == 0 || taggingOptionList[0] == '')
{
    echo "No parameter taggingOption given. Use default tagging option \"internal\"."
    taggingOption = 'internal'
}
else
{
    // check that option has an valid value
    taggingOption = taggingOptionList[0]
    if( !TAGGING_OPTIONS.contains(taggingOption) )
    {
        echo "Error! Invalid value  \"${taggingOption}\" for job parameter taggingOption."
        throw new Exception('Invalid build-job parameter.')
    }

    // Get the package option
    if(taggingOptionList.size() == 2)
    {
        taggedPackage = taggingOptionList[1]
    }
}

// Repository update stage
def projectRepository = prepareRepositoryAddress(params.cpfCIRepository)
def retlist = addRepositoryOperationsStage(projectRepository, params.branchOrTag, taggingOption, taggedPackage, params.CPFCMake_DIR, params.CPFBuildscripts_DIR, params.CIBuildConfigurations_DIR)
def configurations = retlist[0]
def commitID = retlist[1]
def author = retlist[2]

println(
"""
####################################################
This job is run for commit: ${commitID}
####################################################
""" 
)

// Pipeline stage
addBuildStage(configurations, projectRepository, commitID, params.target, params.CPFCMake_DIR, params.CPFBuildscripts_DIR, params.CIBuildConfigurations_DIR)

// Only tag and store results if the job ran a full build.
if(params.target == 'pipeline' && params.cpfConfiguration == '' )
{
    // Add a tag for the verified build
    addTaggingStage(projectRepository, commitID, params.CPFCMake_DIR)

    // Store the results and push them to the web-server.
    def buildResultsRepositoryMaster = prepareRepositoryAddress(params.buildResultRepositoryMaster)
    def buildResultsRepositoryWebServer = params.buildResultRepositoryWebServer
    addUpdateBuildResultsRepositoryStage(
        projectRepository,
        buildResultsRepositoryMaster,
        buildResultsRepositoryWebServer,
        params.buildResultRepositorySubdirectory,
        configurations,
        commitID,
        params.CPFCMake_DIR)
}


//#######################################################################################################################

// For unknown reasons, the repo url can not contain the second : after the machine name
// when used with the GitSCM class. So we remove it here.
def prepareRepositoryAddress( repository )
{

	def preparedRepo = ''
	parts = repository.split(':')
	if(parts.size() == 3 )
	{
		// This should only be the case when using ssh addresses. 
		preparedRepo = parts[0] + ':' + parts[1] + parts[2]
	}
	else
	{
		// This branch should be executed for https projectRepository addresses
		preparedRepo = repository
	}

	return preparedRepo;
}


// Create a temporary branch that contains the the latest revision of the
// main branch (e.g. master) and merge the revisions into it that were pushed to
// the developer branch.
def addRepositoryOperationsStage( projectRepository, branchOrTag, taggingOption, taggedPackage, CPFCMake_DIR, CPFBuildscripts_DIR, CIBuildConfigurations_DIR)
{
    def usedConfigurations = []
    def commitID = ""

    stage('Get Build-Configurations and format')
    {
        node(getDebianNodeZeroLabel())
        {
            ws(getRepositoryName(projectRepository))
            {
                checkoutBranch(projectRepository, branchOrTag)
                // read the CiBuiltConfigurations.json file
                usedConfigurations = getBuildConfigurations(CIBuildConfigurations_DIR)
                debianConfig = getFirstDebianConfiguration(usedConfigurations)

                dir(CHECKOUT_FOLDER)
                {
                    // Update all owned packages if the commit is at the end of a branch.
                    // Otherwise do nothing
                    sh "cmake -DROOT_DIR=\"${pwd()}\" -DGIT_REF=${branchOrTag} -DTAGGING_OPTION=${taggingOption} -DRELEASED_PACKAGE=\"${taggedPackage}\" -DCONFIG=\"${debianConfig}\" -DPACKAGE_MANAGER=\"${params.packageManager}\" -DCPFCMake_DIR=\"${CPFCMake_DIR}\" -DCPFBuildscripts_DIR=\"${CPFBuildscripts_DIR}\" -DCIBuildConfigurations_DIR=\"${CIBuildConfigurations_DIR}\" -P ${CPFCMAKE_DIR}/Scripts/prepareCIRepoForBuild.cmake"

                    // Get the id of HEAD, which will be used in all further steps that do projectRepository check outs.
                    // Using a specific commit instead of a branch makes us invulnerable against changes the may
                    // be pushed to the repo while we run the job.
                    commitID = sh( script:"git rev-parse HEAD", returnStdout: true).trim()
                }
            }
        }
    }

    return [usedConfigurations,commitID]
}

def getDebianNodeZeroLabel()
{
    return  getLinuxNodeLabel() + "-0"
}

def getLinuxNodeLabel()
{
    return "Ubuntu-20.04-${CPF_JENKINSJOB_VERSION}"
}

def getBuildConfigurations(CIBuildConfigurations_DIR)
{
    // read the CiBuiltConfigurations.json file
    def fileContent = readFile(file:"${CHECKOUT_FOLDER}/${CIBuildConfigurations_DIR}/cpfCIBuildConfigurations.json")
    def configurations = new JsonSlurperClassic().parseText(fileContent)
    if(configurations.isEmpty())
    {
        echo "Error! The cpfCIBuildConfigurations.json file does not seem to contain any build configurations."
        throw new Exception('No build configurations defined.')
    }

    def usedConfigurations = []
    if( params.cpfConfiguration != '')
    {
        for(config in configurations)
        {
            if(config.ConfigName == params.cpfConfiguration)
            {
                usedConfigurations.add(config)
            }
        }
        assertConfigurationExists(configurations, params.cpfConfiguration)
    }
    else
    {
        usedConfigurations = configurations
    }

    return usedConfigurations
}

def assertConfigurationExists(configurations, requestedConfig)
{
    def configNames = []
    for(config in configurations)
    {
        configNames.add(config.ConfigName)
    }

    if(!configNames.contains(requestedConfig))
    {
        echo "Error! Requested configuration ${requestedConfig} is not contained in the cpfCIBuildConfigurations.json file."
        def configurationsString = configNames.join(', ')
        echo "Available configurations are ${configurationsString}"
        currentBuild.result = 'FAILURE'

        throw new Exception('Invalid build configuration.')
    }
}

def getFirstDebianConfiguration(configurations)
{
    for(config in configurations)
    {
        if(config.BuildSlaveLabel == getLinuxNodeLabel())
        {
            return config.ConfigName
        }
    }
    return ""
}

def checkoutBranch(projectRepository, branch, subdirectory = CHECKOUT_FOLDER )
{
    checkout([$class: 'GitSCM',
            userRemoteConfigs: [[url: projectRepository]],
            branches: [[name: branch]],
            extensions: [
                [$class: 'CleanBeforeCheckout'],
                [$class: 'RelativeTargetDirectory', 
                    relativeTargetDir: subdirectory],
                [$class: 'SubmoduleOption', 
                    disableSubmodules: false, 
                    parentCredentials: false, 
                    recursiveSubmodules: false, 
                    reference: '', 
                    trackingSubmodules: false ]],
            submoduleCfg: []
        ]
    )
}

def addBuildStage( cpfConfigs, projectRepository, commitId, target, CPFCMake_DIR, CPFBuildscripts_DIR, CIBuildConfigurations_DIR)
{
    stage('Build Stage')
    {
        def parallelNodes = [:]
        // parallelNodes.failFast = true
        
        // add nodes for building the pipeline
        def nodeIndex = 0
        for(config in cpfConfigs)
        {
            echo "Create build node " + config
            def nodeLabel = config.BuildSlaveLabel + '-' + nodeIndex
            echo "Build ${config.ConfigName} under label ${nodeLabel}"
            def myNode = createBuildNode( nodeLabel, config.ConfigName, projectRepository, commitId, target, config?.CompilerConfig, CPFCMake_DIR, CPFBuildscripts_DIR, CIBuildConfigurations_DIR)
            parallelNodes[config.ConfigName] = myNode
            nodeIndex++
        }

        // run the nodes
        parallel parallelNodes
    }
}

def createBuildNode( nodeLabel, cpfConfig, projectRepository, commitId, target, compilerConfig, CPFCMake_DIR, CPFBuildscripts_DIR, CIBuildConfigurations_DIR)
{
    return {
        node(nodeLabel)
        {
            // get the main name of projectRepository
            ws("${getRepositoryName(projectRepository)}-${cpfConfig}") 
            { 
                checkoutBranch(projectRepository, commitId)

                dir(CHECKOUT_FOLDER)
                {
                    // Clean directories
                    cleanSubdirectory('install')  // Remove results from the previous build.

                    def configOption = ''
                    if(compilerConfig) // The build config option is only needed for multi-config generators.
                    {
                        configOption = "--config ${compilerConfig}"
                    }

                    if(params.packageManager == 'conan')
                    {
                        // When using conan the buildscripts are run by conan.
                        // release for releases from cmake script.
                        def channel = "development";
                        // from cmake script.
                        def version = commitId;
                        // from cmake script.
                        def cpfPackage = "MyLib";
                        def conanRemote = "knitschi-conan";

                        // Build the package
                        runXvfbWrappedCommand("conan create . ${cpfPackage}/${version}@jenkins/${channel} -pr \"${CIBuildConfigurations_DIR}/${cpfConfig}\" --build=missing")

                        if( target == 'pipeline' )
                        {
                            // Test the consumability of the created package
                            runXvfbWrappedCommand("conan test Sources/test_package ${cpfPackage}/${version}@jenkins/${channel} -pr \"${CIBuildConfigurations_DIR}/${cpfConfig}\" --build=missing")
                            // Upload the package
                            // if release:
                            runCommand("conan upload ${cpfPackage}/${version} --all --confirm -r ${conanRemote}")
                        }
                    }
                    else
                    {
                        // No package manager
                        // We execute the normal CPF workflow.

                        // Make the python scripts available in the root directory
                        runPythonCommand("\"${CPFBuildscripts_DIR}/0_CopyScripts.py\" --CPFCMake_DIR \"${CPFCMake_DIR}\" --CIBuildConfigurations_DIR \"${CIBuildConfigurations_DIR}\"")
                    
                        // Set the install prefix so we can archive the installed files.
                        runPythonCommand("1_Configure.py ${cpfConfig} -DCMAKE_INSTALL_PREFIX=\"${pwd()}/install\"")

                        // Run a fresh generate
                        runXvfbWrappedPythonCommand( "3_Generate.py ${cpfConfig} --clean" )

                        // build the pipeline target or a user specified target.
                        runXvfbWrappedPythonCommand( "4_Make.py ${cpfConfig} --target ${target} ${configOption}" )

                        // Install and stash files in case of a pipeline build.
                        if( target == 'pipeline' )
                        {
                            runXvfbWrappedPythonCommand( "4_Make.py ${cpfConfig} --target install_all ${configOption}" )
                            def installStash = "${INSTALL_STASH}${cpfConfig}"
                            stash includes: 'install/doc/**', name: installStash
                        }
                    }

                    echo "----- Successfully built target ${target} in ${cpfConfig} configuration. -----"
                }
            }
        }
    }
}

def addTaggingStage(projectRepository, commitID, CPFCMake_DIR)
{
    stage('Tag verified commit')
    {
        node(getDebianNodeZeroLabel())
        {
            ws(getRepositoryName(projectRepository))
            {
                checkoutBranch(projectRepository, commitID)
                dir(CHECKOUT_FOLDER)
                {
                    sh "cmake -DROOT_DIR=\"${pwd()}\" -P ${CPFCMAKE_DIR}/Scripts/addVersionTag.cmake"
                }
            }
        }
    }
}

def addUpdateBuildResultsRepositoryStage(
    projectRepository,
    buildResultsRepositoryMaster,
    buildResultsRepositoryWebServer,
    buildResultsRepositorySubDir,
    cpfConfigs,
    commitID,
    CPFCMAKE_DIR
    )
{
    stage('Archive build results')
    {
        node(getDebianNodeZeroLabel())
        {
            def projectRepositoryName = getRepositoryName(projectRepository)
            ws(projectRepositoryName + '-archive-stage')
            {
                if(params.packageManager == 'conan')
                {
                    
                }
                else
                {
                    // Get the build results repository.
                    def buildResultRepositoryName = getRepositoryName(buildResultsRepositoryMaster)
                    checkoutBranch(buildResultsRepositoryMaster, 'master', buildResultRepositoryName) // get the build results

                    // Checkout the project repository, get the archived build results and commit them to the result repository.
                    checkoutBranch(projectRepository, commitID, projectRepositoryName) // Get the updateBuildResultsRepository.cmake script. We should only check-out CPFCMake in the future here.
                    
                    // Accumulate all installed files from all configurations.
                    // This fills the install directory.
                    cleanSubdirectory('install')    // Remove the results from the previous build.
                    for(cpfConfig in cpfConfigs)
                    {
                        unstashFiles(INSTALL_STASH, cpfConfig.ConfigName)
                    }

                    // Copy the new build results to the results repository and commit them.
                    def scriptCommand = 'cmake '
                    scriptCommand += "-DCMAKE_INSTALL_PREFIX=\"${pwd()}/install\" "
                    scriptCommand += "-DMASTER_BUILD_RESULTS_REPOSITORY_DIR=\"${pwd()}/${buildResultRepositoryName}\" "
                    scriptCommand += "-DWEB_SERVER_BUILD_RESULTS_REPOSITORY=\"${buildResultsRepositoryWebServer}\" "

                    scriptCommand += "-DBUILD_RESULTS_REPOSITORY_PROJECT_SUBDIR=\"${buildResultsRepositorySubDir}\" "
                    scriptCommand += "-DROOT_DIR=\"${pwd()}/${projectRepositoryName}\" "
                    scriptCommand += "-P \"${pwd()}/${projectRepositoryName}/${CPFCMAKE_DIR}/Scripts/updateBuildResultsRepository.cmake\" "

                    sh scriptCommand
                }
            }

			echo '----- The build results were stored successfully. -----'
        }
    }
}

def getRepositoryName(projectRepository)
{
    def lastPart = projectRepository.split('/').last()
    if(lastPart.matches(~'^.*\\.git$') )
    {
        lastPart = lastPart[0..-5]
    }
    return lastPart
}

def unstashFiles(String stashName, String toolchain)
{
    def fullStashName = stashName + toolchain
    echo "Unstash files from stash: " + fullStashName
    unstash fullStashName
}

def runPythonCommand(command)
{
    def pythonCmd = getPythonCommand()
    runCommand(pythonCmd + ' -u ' + command)
}

def getPythonCommand()
{
    pythonVersion = sh(returnStdout: true, script: 'python --version || true').trim()
    def pythonCmd = 'python'
    if(!pythonVersion.matches(~'^.*3\\..*$'))
    {
        pythonCmd = 'python3'
    }
    return pythonCmd
}

def runCommand(command)
{
    if(isUnix())
    {
        //return sh(returnStdout: true, script: command).trim()
        sh(script: command)
    }
    else
    {
        bat(script: command)
    }
}

def runXvfbWrappedPythonCommand(command)
{
    if(isUnix())
    {
        // On linux we need the jenkins Xvfb plugin to simulate an x11 server or qt will give us errors that it can not connect to the x11 server.
        wrap([$class: 'Xvfb', parallelBuild: true, displayNameOffset: 1, autoDisplayName: true, assignedLables: 'linux'])
        {
            runPythonCommand(command)
        }
    }
    else
    {
        runPythonCommand(command)
    }
}

def runXvfbWrappedCommand(command)
{
    if(isUnix())
    {
        // On linux we need the jenkins Xvfb plugin to simulate an x11 server or qt will give us errors that it can not connect to the x11 server.
        wrap([$class: 'Xvfb', parallelBuild: true, displayNameOffset: 1, autoDisplayName: true, assignedLables: 'linux'])
        {
            runCommand(command)
        }
    }
    else
    {
        runCommand(command)
    }
}

def cleanSubdirectory(subdirectory)
{
    dir(subdirectory)
    {
        deleteDir()
    }
}

def showTree()
{
    if(isUnix())
    {
        sh 'tree'
    }
    else
    {
        bat 'tree /F /A'
    }
}

def devMessage(message)
{
    println '------------------------ ' + message
}